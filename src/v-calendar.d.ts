/** Declaration file generated by dts-gen */

export function setupCalendar(t: any): any;

export namespace Calendar {
    const beforeCreate: any[];

    const components: {
        CalendarPane: {
            beforeCreate: any[];
            components: {
                CalendarNav: {
                    beforeCreate: any[];
                    components: {
                        SvgIcon: {
                            beforeCreate: any[];
                            data: any;
                            methods: {
                                updateIcon: any;
                            };
                            mounted: any;
                            props: string[];
                            render: any;
                            staticRenderFns: any[];
                            watch: {
                                name: any;
                            };
                        };
                    };
                    computed: {
                        firstYear: any;
                        headerArrowsStyle: any;
                        headerStyle: any;
                        headerTitleStyle: any;
                        lastYear: any;
                        month: any;
                        monthItems: any;
                        monthRows: any;
                        year: any;
                        yearItems: any;
                        yearRows: any;
                    };
                    created: any;
                    data: any;
                    methods: {
                        createRows: any;
                        getAttributeInfo: any;
                        getMonthAttributes: any;
                        getMonthCellStyle: any;
                        getYearCellStyle: any;
                        getYearGroupIndex: any;
                        mapAttributes: any;
                        monthClick: any;
                        moveNextYear: any;
                        moveNextYearGroup: any;
                        movePrevYear: any;
                        movePrevYearGroup: any;
                        selectMode: any;
                        yearClick: any;
                    };
                    props: {
                        attributes: any;
                        formats: any;
                        mode: {
                            default: string;
                            type: any;
                        };
                        styles: any;
                        validator: {
                            default: any;
                            type: any;
                        };
                        value: {
                            default: any;
                            type: any;
                        };
                    };
                    render: any;
                    staticRenderFns: any[];
                    watch: {
                        attributes: any;
                        mode: any;
                        year: any;
                        yearGroupIndex: any;
                        yearIndex: any;
                    };
                };
                CalendarWeeks: {
                    beforeCreate: any[];
                    components: {
                        CalendarDay: {
                            beforeCreate: any[];
                            components: {
                                CalendarDayPopoverRow: {
                                    beforeCreate: any[];
                                    computed: {
                                        indicatorStyle: any;
                                        isSelectable: any;
                                    };
                                    props: {
                                        attribute: any;
                                        hideIndicator: any;
                                    };
                                    render: any;
                                    staticRenderFns: any[];
                                };
                                Popover: {
                                    beforeCreate: any[];
                                    beforeDestroy: any;
                                    computed: {
                                        containerStyle: any;
                                        contentOffsetDirection: any;
                                        contentWrapperStyle: any;
                                        visibilityIsManaged: any;
                                        visible: any;
                                    };
                                    created: any;
                                    data: any;
                                    methods: {
                                        afterContentEnter: any;
                                        afterContentLeave: any;
                                        beforeContentEnter: any;
                                        beforeContentLeave: any;
                                        click: any;
                                        contentEnter: any;
                                        contentLeave: any;
                                        focusin: any;
                                        focusout: any;
                                        mouseleave: any;
                                        mousemove: any;
                                        refreshClearMargin: any;
                                        windowTapOrClick: any;
                                    };
                                    mounted: any;
                                    props: {
                                        align: {
                                            default: any;
                                            type: any;
                                        };
                                        contentOffset: {
                                            default: any;
                                            type: any;
                                        };
                                        contentStyle: any;
                                        direction: {
                                            default: any;
                                            type: any;
                                        };
                                        forceHidden: any;
                                        isExpanded: {
                                            default: any;
                                            type: any;
                                        };
                                        isInteractive: any;
                                        showClearMargin: any;
                                        toggleVisibleOnClick: any;
                                        transition: {
                                            default: string;
                                            type: any;
                                        };
                                        visibility: {
                                            default: any;
                                            type: any;
                                        };
                                    };
                                    render: any;
                                    staticRenderFns: any[];
                                    watch: {
                                        forceHidden: any;
                                    };
                                };
                            };
                            computed: {
                                attributesLength: any;
                                attributesList: any;
                                attributesMap: any;
                                backgrounds: any;
                                bars: any;
                                barsStyle: any;
                                contentStyle: any;
                                dateTime: any;
                                dayCellStyle: any;
                                dots: any;
                                dotsStyle: any;
                                hasBackgrounds: any;
                                hasBars: any;
                                hasDots: any;
                                hasPopovers: any;
                                inMonth: any;
                                isFocusedDirty: any;
                                isHoveredDirty: any;
                                label: any;
                                popoverContentStyle: any;
                                popoverIsInteractive: any;
                                popoverState: any;
                                popoverVisibility: any;
                                popovers: any;
                                shouldCheckDirty: any;
                            };
                            created: any;
                            data: any;
                            methods: {
                                click: any;
                                evalAttribute: any;
                                getBackground: any;
                                getBackgroundCap: any;
                                getBar: any;
                                getDayEvent: any;
                                getDot: any;
                                getPopover: any;
                                mouseenter: any;
                                mouseleave: any;
                                mouseover: any;
                                refreshGlyphs: any;
                            };
                            props: {
                                attributes: any;
                                day: {
                                    required: boolean;
                                    type: any;
                                };
                                formats: any;
                                popoverContentOffset: {
                                    default: number;
                                    type: any;
                                };
                                styles: any;
                            };
                            render: any;
                            staticRenderFns: any[];
                            watch: {
                                attributesList: any;
                                isFocusedDirty: any;
                                isHoveredDirty: any;
                            };
                        };
                    };
                    computed: {
                        weeks: any;
                    };
                    props: {
                        monthComps: any;
                        nextMonthComps: any;
                        prevMonthComps: any;
                        trimMaxWeek: any;
                    };
                    render: any;
                    staticRenderFns: any[];
                };
                Popover: {
                    beforeCreate: any[];
                    beforeDestroy: any;
                    computed: {
                        containerStyle: any;
                        contentOffsetDirection: any;
                        contentWrapperStyle: any;
                        visibilityIsManaged: any;
                        visible: any;
                    };
                    created: any;
                    data: any;
                    methods: {
                        afterContentEnter: any;
                        afterContentLeave: any;
                        beforeContentEnter: any;
                        beforeContentLeave: any;
                        click: any;
                        contentEnter: any;
                        contentLeave: any;
                        focusin: any;
                        focusout: any;
                        mouseleave: any;
                        mousemove: any;
                        refreshClearMargin: any;
                        windowTapOrClick: any;
                    };
                    mounted: any;
                    props: {
                        align: {
                            default: any;
                            type: any;
                        };
                        contentOffset: {
                            default: any;
                            type: any;
                        };
                        contentStyle: any;
                        direction: {
                            default: any;
                            type: any;
                        };
                        forceHidden: any;
                        isExpanded: {
                            default: any;
                            type: any;
                        };
                        isInteractive: any;
                        showClearMargin: any;
                        toggleVisibleOnClick: any;
                        transition: {
                            default: string;
                            type: any;
                        };
                        visibility: {
                            default: any;
                            type: any;
                        };
                    };
                    render: any;
                    staticRenderFns: any[];
                    watch: {
                        forceHidden: any;
                    };
                };
                SvgIcon: {
                    beforeCreate: any[];
                    data: any;
                    methods: {
                        updateIcon: any;
                    };
                    mounted: any;
                    props: string[];
                    render: any;
                    staticRenderFns: any[];
                    watch: {
                        name: any;
                    };
                };
            };
            computed: {
                arrowStyle: any;
                canMoveNextMonth: any;
                canMovePrevMonth: any;
                headerHorizontalDividerStyle_: any;
                headerStyle: any;
                navSlots: any;
                navWrapperStyle: any;
                paneStyle: any;
                titleClass: any;
                titleStyle: any;
                titleTransition_: any;
                weekdayLabels: any;
                weekdaysHorizontalDividerStyle_: any;
                weekdaysStyle_: any;
                weeksStyle_: any;
                weeksTransition_: any;
            };
            created: any;
            data: any;
            methods: {
                canMove: any;
                forceMove: any;
                getTransitionDirection: any;
                getTransitionName: any;
                loadPage: any;
                monthIsDisabled: any;
                move: any;
                moveNextMonth: any;
                moveNextYear: any;
                movePrevMonth: any;
                movePrevYear: any;
                moveThisMonth: any;
                navPageSelected: any;
                preloadPages: any;
                touchEnd: any;
                touchMove: any;
                touchStart: any;
                yearIsDisabled: any;
            };
            props: {
                formats: any;
                hideLeftButton: any;
                hideRightButton: any;
                maxPage: any;
                minPage: any;
                navVisibility: {
                    default: any;
                    type: any;
                };
                page: {
                    default: any;
                    type: any;
                };
                paneWidth: any;
                position: {
                    default: number;
                    type: any;
                };
                styles: any;
                titlePosition: {
                    default: any;
                    type: any;
                };
                titleTransition: {
                    default: any;
                    type: any;
                };
                weeksTransition: {
                    default: any;
                    type: any;
                };
            };
            render: any;
            staticRenderFns: any[];
            watch: {
                page: any;
                page_: any;
            };
        };
    };

    const mixins: {
        methods: {
            mergeListeners: any;
        };
    }[];

    const name: string;

    function beforeDestroy(): void;

    function created(): void;

    function data(): any;

    function mounted(): void;

    function render(t: any): any;

    namespace computed {
        function attributes_(): any;

        function dividerStyle(): any;

        function formats_(): any;

        function isDoublePaned_(): any;

        function leftButtonHidden(): any;

        function maxFromPage(): any;

        function maxPage_(): any;

        function minPage_(): any;

        function minToPage(): any;

        function rightButtonHidden(): any;

        function themeStyles_(): any;

        function wrapperStyle(): any;

    }

    namespace methods {
        function refreshFromPage(): any;

        function refreshIsConstrained(): void;

        function refreshToPage(): any;

    }

    namespace props {
        class attributes {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            copyWithin(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            entries(): any;

            // Native method; no parameter or return type inference available
            every(p0: any): any;

            // Native method; no parameter or return type inference available
            fill(p0: any): any;

            // Native method; no parameter or return type inference available
            filter(p0: any): any;

            // Native method; no parameter or return type inference available
            find(p0: any): any;

            // Native method; no parameter or return type inference available
            findIndex(p0: any): any;

            // Native method; no parameter or return type inference available
            forEach(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            join(p0: any): any;

            // Native method; no parameter or return type inference available
            keys(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            map(p0: any): any;

            // Native method; no parameter or return type inference available
            pop(): any;

            // Native method; no parameter or return type inference available
            push(p0: any): any;

            // Native method; no parameter or return type inference available
            reduce(p0: any): any;

            // Native method; no parameter or return type inference available
            reduceRight(p0: any): any;

            // Native method; no parameter or return type inference available
            reverse(): any;

            // Native method; no parameter or return type inference available
            shift(): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            some(p0: any): any;

            // Native method; no parameter or return type inference available
            sort(p0: any): any;

            // Native method; no parameter or return type inference available
            splice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            unshift(p0: any): any;

            // Native method; no parameter or return type inference available
            values(): any;

            static from(p0: any): any;

            static isArray(p0: any): any;

            static of(): any;

        }

        class formats {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        class fromPage {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        class isDoublePaned {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class isExpanded {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class isLinked {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class isVertical {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class maxDate {
            constructor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any);

            // Native method; no parameter or return type inference available
            getDate(): any;

            // Native method; no parameter or return type inference available
            getDay(): any;

            // Native method; no parameter or return type inference available
            getFullYear(): any;

            // Native method; no parameter or return type inference available
            getHours(): any;

            // Native method; no parameter or return type inference available
            getMilliseconds(): any;

            // Native method; no parameter or return type inference available
            getMinutes(): any;

            // Native method; no parameter or return type inference available
            getMonth(): any;

            // Native method; no parameter or return type inference available
            getSeconds(): any;

            // Native method; no parameter or return type inference available
            getTime(): any;

            // Native method; no parameter or return type inference available
            getTimezoneOffset(): any;

            // Native method; no parameter or return type inference available
            getUTCDate(): any;

            // Native method; no parameter or return type inference available
            getUTCDay(): any;

            // Native method; no parameter or return type inference available
            getUTCFullYear(): any;

            // Native method; no parameter or return type inference available
            getUTCHours(): any;

            // Native method; no parameter or return type inference available
            getUTCMilliseconds(): any;

            // Native method; no parameter or return type inference available
            getUTCMinutes(): any;

            // Native method; no parameter or return type inference available
            getUTCMonth(): any;

            // Native method; no parameter or return type inference available
            getUTCSeconds(): any;

            // Native method; no parameter or return type inference available
            getYear(): any;

            // Native method; no parameter or return type inference available
            setDate(p0: any): any;

            // Native method; no parameter or return type inference available
            setFullYear(p0: any, p1: any, p2: any): any;

            // Native method; no parameter or return type inference available
            setHours(p0: any, p1: any, p2: any, p3: any): any;

            // Native method; no parameter or return type inference available
            setMilliseconds(p0: any): any;

            // Native method; no parameter or return type inference available
            setMinutes(p0: any, p1: any, p2: any): any;

            // Native method; no parameter or return type inference available
            setMonth(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            setSeconds(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            setTime(p0: any): any;

            // Native method; no parameter or return type inference available
            setUTCDate(p0: any): any;

            // Native method; no parameter or return type inference available
            setUTCFullYear(p0: any, p1: any, p2: any): any;

            // Native method; no parameter or return type inference available
            setUTCHours(p0: any, p1: any, p2: any, p3: any): any;

            // Native method; no parameter or return type inference available
            setUTCMilliseconds(p0: any): any;

            // Native method; no parameter or return type inference available
            setUTCMinutes(p0: any, p1: any, p2: any): any;

            // Native method; no parameter or return type inference available
            setUTCMonth(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            setUTCSeconds(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            setYear(p0: any): any;

            // Native method; no parameter or return type inference available
            toDateString(): any;

            // Native method; no parameter or return type inference available
            toGMTString(): any;

            // Native method; no parameter or return type inference available
            toISOString(): any;

            // Native method; no parameter or return type inference available
            toJSON(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleDateString(): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toLocaleTimeString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toTimeString(): any;

            // Native method; no parameter or return type inference available
            toUTCString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static UTC(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): any;

            static now(): any;

            static parse(p0: any): any;

        }

        class maxPage {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        class minDate {
            constructor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any);

            // Native method; no parameter or return type inference available
            getDate(): any;

            // Native method; no parameter or return type inference available
            getDay(): any;

            // Native method; no parameter or return type inference available
            getFullYear(): any;

            // Native method; no parameter or return type inference available
            getHours(): any;

            // Native method; no parameter or return type inference available
            getMilliseconds(): any;

            // Native method; no parameter or return type inference available
            getMinutes(): any;

            // Native method; no parameter or return type inference available
            getMonth(): any;

            // Native method; no parameter or return type inference available
            getSeconds(): any;

            // Native method; no parameter or return type inference available
            getTime(): any;

            // Native method; no parameter or return type inference available
            getTimezoneOffset(): any;

            // Native method; no parameter or return type inference available
            getUTCDate(): any;

            // Native method; no parameter or return type inference available
            getUTCDay(): any;

            // Native method; no parameter or return type inference available
            getUTCFullYear(): any;

            // Native method; no parameter or return type inference available
            getUTCHours(): any;

            // Native method; no parameter or return type inference available
            getUTCMilliseconds(): any;

            // Native method; no parameter or return type inference available
            getUTCMinutes(): any;

            // Native method; no parameter or return type inference available
            getUTCMonth(): any;

            // Native method; no parameter or return type inference available
            getUTCSeconds(): any;

            // Native method; no parameter or return type inference available
            getYear(): any;

            // Native method; no parameter or return type inference available
            setDate(p0: any): any;

            // Native method; no parameter or return type inference available
            setFullYear(p0: any, p1: any, p2: any): any;

            // Native method; no parameter or return type inference available
            setHours(p0: any, p1: any, p2: any, p3: any): any;

            // Native method; no parameter or return type inference available
            setMilliseconds(p0: any): any;

            // Native method; no parameter or return type inference available
            setMinutes(p0: any, p1: any, p2: any): any;

            // Native method; no parameter or return type inference available
            setMonth(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            setSeconds(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            setTime(p0: any): any;

            // Native method; no parameter or return type inference available
            setUTCDate(p0: any): any;

            // Native method; no parameter or return type inference available
            setUTCFullYear(p0: any, p1: any, p2: any): any;

            // Native method; no parameter or return type inference available
            setUTCHours(p0: any, p1: any, p2: any, p3: any): any;

            // Native method; no parameter or return type inference available
            setUTCMilliseconds(p0: any): any;

            // Native method; no parameter or return type inference available
            setUTCMinutes(p0: any, p1: any, p2: any): any;

            // Native method; no parameter or return type inference available
            setUTCMonth(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            setUTCSeconds(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            setYear(p0: any): any;

            // Native method; no parameter or return type inference available
            toDateString(): any;

            // Native method; no parameter or return type inference available
            toGMTString(): any;

            // Native method; no parameter or return type inference available
            toISOString(): any;

            // Native method; no parameter or return type inference available
            toJSON(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleDateString(): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toLocaleTimeString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toTimeString(): any;

            // Native method; no parameter or return type inference available
            toUTCString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static UTC(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): any;

            static now(): any;

            static parse(p0: any): any;

        }

        class minPage {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        class themeStyles {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        class toPage {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        namespace paneWidth {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace showLinkedButtons {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

    }

    namespace watch {
        function fromPage(): void;

        function fromPage_(t: any, e: any): void;

        function isDoublePaned_(): void;

        function isExpanded(): void;

        function isLinked(t: any): void;

        function toPage(): void;

        function toPage_(t: any, e: any): void;

    }

}

export namespace DatePicker {
    const components: {
        DateRangePicker: {
            components: {
                Calendar: {
                    beforeCreate: any[];
                    beforeDestroy: any;
                    components: {
                        CalendarPane: {
                            beforeCreate: any[];
                            components: {
                                CalendarNav: {
                                    beforeCreate: any[];
                                    components: {
                                        SvgIcon: {
                                            beforeCreate: any[];
                                            data: any;
                                            methods: {
                                                updateIcon: any;
                                            };
                                            mounted: any;
                                            props: string[];
                                            render: any;
                                            staticRenderFns: any[];
                                            watch: {
                                                name: any;
                                            };
                                        };
                                    };
                                    computed: {
                                        firstYear: any;
                                        headerArrowsStyle: any;
                                        headerStyle: any;
                                        headerTitleStyle: any;
                                        lastYear: any;
                                        month: any;
                                        monthItems: any;
                                        monthRows: any;
                                        year: any;
                                        yearItems: any;
                                        yearRows: any;
                                    };
                                    created: any;
                                    data: any;
                                    methods: {
                                        createRows: any;
                                        getAttributeInfo: any;
                                        getMonthAttributes: any;
                                        getMonthCellStyle: any;
                                        getYearCellStyle: any;
                                        getYearGroupIndex: any;
                                        mapAttributes: any;
                                        monthClick: any;
                                        moveNextYear: any;
                                        moveNextYearGroup: any;
                                        movePrevYear: any;
                                        movePrevYearGroup: any;
                                        selectMode: any;
                                        yearClick: any;
                                    };
                                    props: {
                                        attributes: any;
                                        formats: any;
                                        mode: {
                                            default: string;
                                            type: any;
                                        };
                                        styles: any;
                                        validator: {
                                            default: any;
                                            type: any;
                                        };
                                        value: {
                                            default: any;
                                            type: any;
                                        };
                                    };
                                    render: any;
                                    staticRenderFns: any[];
                                    watch: {
                                        attributes: any;
                                        mode: any;
                                        year: any;
                                        yearGroupIndex: any;
                                        yearIndex: any;
                                    };
                                };
                                CalendarWeeks: {
                                    beforeCreate: any[];
                                    components: {
                                        CalendarDay: {
                                            beforeCreate: any[];
                                            components: {
                                                CalendarDayPopoverRow: {
                                                    beforeCreate: any[];
                                                    computed: {
                                                        indicatorStyle: any;
                                                        isSelectable: any;
                                                    };
                                                    props: {
                                                        attribute: any;
                                                        hideIndicator: any;
                                                    };
                                                    render: any;
                                                    staticRenderFns: any[];
                                                };
                                                Popover: {
                                                    beforeCreate: any[];
                                                    beforeDestroy: any;
                                                    computed: {
                                                        containerStyle: any;
                                                        contentOffsetDirection: any;
                                                        contentWrapperStyle: any;
                                                        visibilityIsManaged: any;
                                                        visible: any;
                                                    };
                                                    created: any;
                                                    data: any;
                                                    methods: {
                                                        afterContentEnter: any;
                                                        afterContentLeave: any;
                                                        beforeContentEnter: any;
                                                        beforeContentLeave: any;
                                                        click: any;
                                                        contentEnter: any;
                                                        contentLeave: any;
                                                        focusin: any;
                                                        focusout: any;
                                                        mouseleave: any;
                                                        mousemove: any;
                                                        refreshClearMargin: any;
                                                        windowTapOrClick: any;
                                                    };
                                                    mounted: any;
                                                    props: {
                                                        align: {
                                                            default: any;
                                                            type: any;
                                                        };
                                                        contentOffset: {
                                                            default: any;
                                                            type: any;
                                                        };
                                                        contentStyle: any;
                                                        direction: {
                                                            default: any;
                                                            type: any;
                                                        };
                                                        forceHidden: any;
                                                        isExpanded: {
                                                            default: any;
                                                            type: any;
                                                        };
                                                        isInteractive: any;
                                                        showClearMargin: any;
                                                        toggleVisibleOnClick: any;
                                                        transition: {
                                                            default: string;
                                                            type: any;
                                                        };
                                                        visibility: {
                                                            default: any;
                                                            type: any;
                                                        };
                                                    };
                                                    render: any;
                                                    staticRenderFns: any[];
                                                    watch: {
                                                        forceHidden: any;
                                                    };
                                                };
                                            };
                                            computed: {
                                                attributesLength: any;
                                                attributesList: any;
                                                attributesMap: any;
                                                backgrounds: any;
                                                bars: any;
                                                barsStyle: any;
                                                contentStyle: any;
                                                dateTime: any;
                                                dayCellStyle: any;
                                                dots: any;
                                                dotsStyle: any;
                                                hasBackgrounds: any;
                                                hasBars: any;
                                                hasDots: any;
                                                hasPopovers: any;
                                                inMonth: any;
                                                isFocusedDirty: any;
                                                isHoveredDirty: any;
                                                label: any;
                                                popoverContentStyle: any;
                                                popoverIsInteractive: any;
                                                popoverState: any;
                                                popoverVisibility: any;
                                                popovers: any;
                                                shouldCheckDirty: any;
                                            };
                                            created: any;
                                            data: any;
                                            methods: {
                                                click: any;
                                                evalAttribute: any;
                                                getBackground: any;
                                                getBackgroundCap: any;
                                                getBar: any;
                                                getDayEvent: any;
                                                getDot: any;
                                                getPopover: any;
                                                mouseenter: any;
                                                mouseleave: any;
                                                mouseover: any;
                                                refreshGlyphs: any;
                                            };
                                            props: {
                                                attributes: any;
                                                day: {
                                                    required: boolean;
                                                    type: any;
                                                };
                                                formats: any;
                                                popoverContentOffset: {
                                                    default: number;
                                                    type: any;
                                                };
                                                styles: any;
                                            };
                                            render: any;
                                            staticRenderFns: any[];
                                            watch: {
                                                attributesList: any;
                                                isFocusedDirty: any;
                                                isHoveredDirty: any;
                                            };
                                        };
                                    };
                                    computed: {
                                        weeks: any;
                                    };
                                    props: {
                                        monthComps: any;
                                        nextMonthComps: any;
                                        prevMonthComps: any;
                                        trimMaxWeek: any;
                                    };
                                    render: any;
                                    staticRenderFns: any[];
                                };
                                Popover: {
                                    beforeCreate: any[];
                                    beforeDestroy: any;
                                    computed: {
                                        containerStyle: any;
                                        contentOffsetDirection: any;
                                        contentWrapperStyle: any;
                                        visibilityIsManaged: any;
                                        visible: any;
                                    };
                                    created: any;
                                    data: any;
                                    methods: {
                                        afterContentEnter: any;
                                        afterContentLeave: any;
                                        beforeContentEnter: any;
                                        beforeContentLeave: any;
                                        click: any;
                                        contentEnter: any;
                                        contentLeave: any;
                                        focusin: any;
                                        focusout: any;
                                        mouseleave: any;
                                        mousemove: any;
                                        refreshClearMargin: any;
                                        windowTapOrClick: any;
                                    };
                                    mounted: any;
                                    props: {
                                        align: {
                                            default: any;
                                            type: any;
                                        };
                                        contentOffset: {
                                            default: any;
                                            type: any;
                                        };
                                        contentStyle: any;
                                        direction: {
                                            default: any;
                                            type: any;
                                        };
                                        forceHidden: any;
                                        isExpanded: {
                                            default: any;
                                            type: any;
                                        };
                                        isInteractive: any;
                                        showClearMargin: any;
                                        toggleVisibleOnClick: any;
                                        transition: {
                                            default: string;
                                            type: any;
                                        };
                                        visibility: {
                                            default: any;
                                            type: any;
                                        };
                                    };
                                    render: any;
                                    staticRenderFns: any[];
                                    watch: {
                                        forceHidden: any;
                                    };
                                };
                                SvgIcon: {
                                    beforeCreate: any[];
                                    data: any;
                                    methods: {
                                        updateIcon: any;
                                    };
                                    mounted: any;
                                    props: string[];
                                    render: any;
                                    staticRenderFns: any[];
                                    watch: {
                                        name: any;
                                    };
                                };
                            };
                            computed: {
                                arrowStyle: any;
                                canMoveNextMonth: any;
                                canMovePrevMonth: any;
                                headerHorizontalDividerStyle_: any;
                                headerStyle: any;
                                navSlots: any;
                                navWrapperStyle: any;
                                paneStyle: any;
                                titleClass: any;
                                titleStyle: any;
                                titleTransition_: any;
                                weekdayLabels: any;
                                weekdaysHorizontalDividerStyle_: any;
                                weekdaysStyle_: any;
                                weeksStyle_: any;
                                weeksTransition_: any;
                            };
                            created: any;
                            data: any;
                            methods: {
                                canMove: any;
                                forceMove: any;
                                getTransitionDirection: any;
                                getTransitionName: any;
                                loadPage: any;
                                monthIsDisabled: any;
                                move: any;
                                moveNextMonth: any;
                                moveNextYear: any;
                                movePrevMonth: any;
                                movePrevYear: any;
                                moveThisMonth: any;
                                navPageSelected: any;
                                preloadPages: any;
                                touchEnd: any;
                                touchMove: any;
                                touchStart: any;
                                yearIsDisabled: any;
                            };
                            props: {
                                formats: any;
                                hideLeftButton: any;
                                hideRightButton: any;
                                maxPage: any;
                                minPage: any;
                                navVisibility: {
                                    default: any;
                                    type: any;
                                };
                                page: {
                                    default: any;
                                    type: any;
                                };
                                paneWidth: any;
                                position: {
                                    default: number;
                                    type: any;
                                };
                                styles: any;
                                titlePosition: {
                                    default: any;
                                    type: any;
                                };
                                titleTransition: {
                                    default: any;
                                    type: any;
                                };
                                weeksTransition: {
                                    default: any;
                                    type: any;
                                };
                            };
                            render: any;
                            staticRenderFns: any[];
                            watch: {
                                page: any;
                                page_: any;
                            };
                        };
                    };
                    computed: {
                        attributes_: any;
                        dividerStyle: any;
                        formats_: any;
                        isDoublePaned_: any;
                        leftButtonHidden: any;
                        maxFromPage: any;
                        maxPage_: any;
                        minPage_: any;
                        minToPage: any;
                        rightButtonHidden: any;
                        themeStyles_: any;
                        wrapperStyle: any;
                    };
                    created: any;
                    data: any;
                    methods: {
                        refreshFromPage: any;
                        refreshIsConstrained: any;
                        refreshToPage: any;
                    };
                    mixins: {
                        methods: {
                            mergeListeners: any;
                        };
                    }[];
                    mounted: any;
                    name: string;
                    props: {
                        attributes: any;
                        formats: any;
                        fromPage: any;
                        isDoublePaned: any;
                        isExpanded: any;
                        isLinked: any;
                        isVertical: any;
                        maxDate: any;
                        maxPage: any;
                        minDate: any;
                        minPage: any;
                        paneWidth: {
                            default: any;
                            type: any;
                        };
                        showLinkedButtons: {
                            default: any;
                            type: any;
                        };
                        themeStyles: any;
                        toPage: any;
                    };
                    render: any;
                    watch: {
                        fromPage: any;
                        fromPage_: any;
                        isDoublePaned_: any;
                        isExpanded: any;
                        isLinked: any;
                        toPage: any;
                        toPage_: any;
                    };
                };
            };
            computed: {
                attributes_: any;
                dragAttribute_: any;
                selectAttribute_: any;
                themeStyles_: any;
            };
            created: any;
            data: any;
            methods: {
                clickDay: any;
                dateIsValid: any;
                enterDay: any;
            };
            mixins: {
                methods: {
                    mergeListeners: any;
                };
            }[];
            props: {
                attributes: any;
                disabledAttribute: any;
                dragAttribute: any;
                isRequired: any;
                selectAttribute: any;
                themeStyles: any;
                value: {
                    default: any;
                    type: any;
                };
            };
            render: any;
            watch: {
                dragValue: any;
            };
        };
        MultipleDatePicker: {
            components: {
                Calendar: {
                    beforeCreate: any[];
                    beforeDestroy: any;
                    components: {
                        CalendarPane: {
                            beforeCreate: any[];
                            components: {
                                CalendarNav: {
                                    beforeCreate: any[];
                                    components: {
                                        SvgIcon: {
                                            beforeCreate: any[];
                                            data: any;
                                            methods: {
                                                updateIcon: any;
                                            };
                                            mounted: any;
                                            props: string[];
                                            render: any;
                                            staticRenderFns: any[];
                                            watch: {
                                                name: any;
                                            };
                                        };
                                    };
                                    computed: {
                                        firstYear: any;
                                        headerArrowsStyle: any;
                                        headerStyle: any;
                                        headerTitleStyle: any;
                                        lastYear: any;
                                        month: any;
                                        monthItems: any;
                                        monthRows: any;
                                        year: any;
                                        yearItems: any;
                                        yearRows: any;
                                    };
                                    created: any;
                                    data: any;
                                    methods: {
                                        createRows: any;
                                        getAttributeInfo: any;
                                        getMonthAttributes: any;
                                        getMonthCellStyle: any;
                                        getYearCellStyle: any;
                                        getYearGroupIndex: any;
                                        mapAttributes: any;
                                        monthClick: any;
                                        moveNextYear: any;
                                        moveNextYearGroup: any;
                                        movePrevYear: any;
                                        movePrevYearGroup: any;
                                        selectMode: any;
                                        yearClick: any;
                                    };
                                    props: {
                                        attributes: any;
                                        formats: any;
                                        mode: {
                                            default: string;
                                            type: any;
                                        };
                                        styles: any;
                                        validator: {
                                            default: any;
                                            type: any;
                                        };
                                        value: {
                                            default: any;
                                            type: any;
                                        };
                                    };
                                    render: any;
                                    staticRenderFns: any[];
                                    watch: {
                                        attributes: any;
                                        mode: any;
                                        year: any;
                                        yearGroupIndex: any;
                                        yearIndex: any;
                                    };
                                };
                                CalendarWeeks: {
                                    beforeCreate: any[];
                                    components: {
                                        CalendarDay: {
                                            beforeCreate: any[];
                                            components: {
                                                CalendarDayPopoverRow: {
                                                    beforeCreate: any[];
                                                    computed: {
                                                        indicatorStyle: any;
                                                        isSelectable: any;
                                                    };
                                                    props: {
                                                        attribute: any;
                                                        hideIndicator: any;
                                                    };
                                                    render: any;
                                                    staticRenderFns: any[];
                                                };
                                                Popover: {
                                                    beforeCreate: any[];
                                                    beforeDestroy: any;
                                                    computed: {
                                                        containerStyle: any;
                                                        contentOffsetDirection: any;
                                                        contentWrapperStyle: any;
                                                        visibilityIsManaged: any;
                                                        visible: any;
                                                    };
                                                    created: any;
                                                    data: any;
                                                    methods: {
                                                        afterContentEnter: any;
                                                        afterContentLeave: any;
                                                        beforeContentEnter: any;
                                                        beforeContentLeave: any;
                                                        click: any;
                                                        contentEnter: any;
                                                        contentLeave: any;
                                                        focusin: any;
                                                        focusout: any;
                                                        mouseleave: any;
                                                        mousemove: any;
                                                        refreshClearMargin: any;
                                                        windowTapOrClick: any;
                                                    };
                                                    mounted: any;
                                                    props: {
                                                        align: {
                                                            default: any;
                                                            type: any;
                                                        };
                                                        contentOffset: {
                                                            default: any;
                                                            type: any;
                                                        };
                                                        contentStyle: any;
                                                        direction: {
                                                            default: any;
                                                            type: any;
                                                        };
                                                        forceHidden: any;
                                                        isExpanded: {
                                                            default: any;
                                                            type: any;
                                                        };
                                                        isInteractive: any;
                                                        showClearMargin: any;
                                                        toggleVisibleOnClick: any;
                                                        transition: {
                                                            default: string;
                                                            type: any;
                                                        };
                                                        visibility: {
                                                            default: any;
                                                            type: any;
                                                        };
                                                    };
                                                    render: any;
                                                    staticRenderFns: any[];
                                                    watch: {
                                                        forceHidden: any;
                                                    };
                                                };
                                            };
                                            computed: {
                                                attributesLength: any;
                                                attributesList: any;
                                                attributesMap: any;
                                                backgrounds: any;
                                                bars: any;
                                                barsStyle: any;
                                                contentStyle: any;
                                                dateTime: any;
                                                dayCellStyle: any;
                                                dots: any;
                                                dotsStyle: any;
                                                hasBackgrounds: any;
                                                hasBars: any;
                                                hasDots: any;
                                                hasPopovers: any;
                                                inMonth: any;
                                                isFocusedDirty: any;
                                                isHoveredDirty: any;
                                                label: any;
                                                popoverContentStyle: any;
                                                popoverIsInteractive: any;
                                                popoverState: any;
                                                popoverVisibility: any;
                                                popovers: any;
                                                shouldCheckDirty: any;
                                            };
                                            created: any;
                                            data: any;
                                            methods: {
                                                click: any;
                                                evalAttribute: any;
                                                getBackground: any;
                                                getBackgroundCap: any;
                                                getBar: any;
                                                getDayEvent: any;
                                                getDot: any;
                                                getPopover: any;
                                                mouseenter: any;
                                                mouseleave: any;
                                                mouseover: any;
                                                refreshGlyphs: any;
                                            };
                                            props: {
                                                attributes: any;
                                                day: {
                                                    required: boolean;
                                                    type: any;
                                                };
                                                formats: any;
                                                popoverContentOffset: {
                                                    default: number;
                                                    type: any;
                                                };
                                                styles: any;
                                            };
                                            render: any;
                                            staticRenderFns: any[];
                                            watch: {
                                                attributesList: any;
                                                isFocusedDirty: any;
                                                isHoveredDirty: any;
                                            };
                                        };
                                    };
                                    computed: {
                                        weeks: any;
                                    };
                                    props: {
                                        monthComps: any;
                                        nextMonthComps: any;
                                        prevMonthComps: any;
                                        trimMaxWeek: any;
                                    };
                                    render: any;
                                    staticRenderFns: any[];
                                };
                                Popover: {
                                    beforeCreate: any[];
                                    beforeDestroy: any;
                                    computed: {
                                        containerStyle: any;
                                        contentOffsetDirection: any;
                                        contentWrapperStyle: any;
                                        visibilityIsManaged: any;
                                        visible: any;
                                    };
                                    created: any;
                                    data: any;
                                    methods: {
                                        afterContentEnter: any;
                                        afterContentLeave: any;
                                        beforeContentEnter: any;
                                        beforeContentLeave: any;
                                        click: any;
                                        contentEnter: any;
                                        contentLeave: any;
                                        focusin: any;
                                        focusout: any;
                                        mouseleave: any;
                                        mousemove: any;
                                        refreshClearMargin: any;
                                        windowTapOrClick: any;
                                    };
                                    mounted: any;
                                    props: {
                                        align: {
                                            default: any;
                                            type: any;
                                        };
                                        contentOffset: {
                                            default: any;
                                            type: any;
                                        };
                                        contentStyle: any;
                                        direction: {
                                            default: any;
                                            type: any;
                                        };
                                        forceHidden: any;
                                        isExpanded: {
                                            default: any;
                                            type: any;
                                        };
                                        isInteractive: any;
                                        showClearMargin: any;
                                        toggleVisibleOnClick: any;
                                        transition: {
                                            default: string;
                                            type: any;
                                        };
                                        visibility: {
                                            default: any;
                                            type: any;
                                        };
                                    };
                                    render: any;
                                    staticRenderFns: any[];
                                    watch: {
                                        forceHidden: any;
                                    };
                                };
                                SvgIcon: {
                                    beforeCreate: any[];
                                    data: any;
                                    methods: {
                                        updateIcon: any;
                                    };
                                    mounted: any;
                                    props: string[];
                                    render: any;
                                    staticRenderFns: any[];
                                    watch: {
                                        name: any;
                                    };
                                };
                            };
                            computed: {
                                arrowStyle: any;
                                canMoveNextMonth: any;
                                canMovePrevMonth: any;
                                headerHorizontalDividerStyle_: any;
                                headerStyle: any;
                                navSlots: any;
                                navWrapperStyle: any;
                                paneStyle: any;
                                titleClass: any;
                                titleStyle: any;
                                titleTransition_: any;
                                weekdayLabels: any;
                                weekdaysHorizontalDividerStyle_: any;
                                weekdaysStyle_: any;
                                weeksStyle_: any;
                                weeksTransition_: any;
                            };
                            created: any;
                            data: any;
                            methods: {
                                canMove: any;
                                forceMove: any;
                                getTransitionDirection: any;
                                getTransitionName: any;
                                loadPage: any;
                                monthIsDisabled: any;
                                move: any;
                                moveNextMonth: any;
                                moveNextYear: any;
                                movePrevMonth: any;
                                movePrevYear: any;
                                moveThisMonth: any;
                                navPageSelected: any;
                                preloadPages: any;
                                touchEnd: any;
                                touchMove: any;
                                touchStart: any;
                                yearIsDisabled: any;
                            };
                            props: {
                                formats: any;
                                hideLeftButton: any;
                                hideRightButton: any;
                                maxPage: any;
                                minPage: any;
                                navVisibility: {
                                    default: any;
                                    type: any;
                                };
                                page: {
                                    default: any;
                                    type: any;
                                };
                                paneWidth: any;
                                position: {
                                    default: number;
                                    type: any;
                                };
                                styles: any;
                                titlePosition: {
                                    default: any;
                                    type: any;
                                };
                                titleTransition: {
                                    default: any;
                                    type: any;
                                };
                                weeksTransition: {
                                    default: any;
                                    type: any;
                                };
                            };
                            render: any;
                            staticRenderFns: any[];
                            watch: {
                                page: any;
                                page_: any;
                            };
                        };
                    };
                    computed: {
                        attributes_: any;
                        dividerStyle: any;
                        formats_: any;
                        isDoublePaned_: any;
                        leftButtonHidden: any;
                        maxFromPage: any;
                        maxPage_: any;
                        minPage_: any;
                        minToPage: any;
                        rightButtonHidden: any;
                        themeStyles_: any;
                        wrapperStyle: any;
                    };
                    created: any;
                    data: any;
                    methods: {
                        refreshFromPage: any;
                        refreshIsConstrained: any;
                        refreshToPage: any;
                    };
                    mixins: {
                        methods: {
                            mergeListeners: any;
                        };
                    }[];
                    mounted: any;
                    name: string;
                    props: {
                        attributes: any;
                        formats: any;
                        fromPage: any;
                        isDoublePaned: any;
                        isExpanded: any;
                        isLinked: any;
                        isVertical: any;
                        maxDate: any;
                        maxPage: any;
                        minDate: any;
                        minPage: any;
                        paneWidth: {
                            default: any;
                            type: any;
                        };
                        showLinkedButtons: {
                            default: any;
                            type: any;
                        };
                        themeStyles: any;
                        toPage: any;
                    };
                    render: any;
                    watch: {
                        fromPage: any;
                        fromPage_: any;
                        isDoublePaned_: any;
                        isExpanded: any;
                        isLinked: any;
                        toPage: any;
                        toPage_: any;
                    };
                };
            };
            computed: {
                attributes_: any;
                selectAttribute_: any;
            };
            methods: {
                clickDay: any;
            };
            mixins: {
                methods: {
                    mergeListeners: any;
                };
            }[];
            props: {
                attributes: any;
                disabledAttribute: any;
                isRequired: any;
                selectAttribute: any;
                value: {
                    default: any;
                    type: any;
                };
            };
            render: any;
        };
        Popover: {
            beforeCreate: any[];
            beforeDestroy: any;
            computed: {
                containerStyle: any;
                contentOffsetDirection: any;
                contentWrapperStyle: any;
                visibilityIsManaged: any;
                visible: any;
            };
            created: any;
            data: any;
            methods: {
                afterContentEnter: any;
                afterContentLeave: any;
                beforeContentEnter: any;
                beforeContentLeave: any;
                click: any;
                contentEnter: any;
                contentLeave: any;
                focusin: any;
                focusout: any;
                mouseleave: any;
                mousemove: any;
                refreshClearMargin: any;
                windowTapOrClick: any;
            };
            mounted: any;
            props: {
                align: {
                    default: any;
                    type: any;
                };
                contentOffset: {
                    default: any;
                    type: any;
                };
                contentStyle: any;
                direction: {
                    default: any;
                    type: any;
                };
                forceHidden: any;
                isExpanded: {
                    default: any;
                    type: any;
                };
                isInteractive: any;
                showClearMargin: any;
                toggleVisibleOnClick: any;
                transition: {
                    default: string;
                    type: any;
                };
                visibility: {
                    default: any;
                    type: any;
                };
            };
            render: any;
            staticRenderFns: any[];
            watch: {
                forceHidden: any;
            };
        };
        SingleDatePicker: {
            components: {
                Calendar: {
                    beforeCreate: any[];
                    beforeDestroy: any;
                    components: {
                        CalendarPane: {
                            beforeCreate: any[];
                            components: {
                                CalendarNav: {
                                    beforeCreate: any[];
                                    components: {
                                        SvgIcon: {
                                            beforeCreate: any[];
                                            data: any;
                                            methods: {
                                                updateIcon: any;
                                            };
                                            mounted: any;
                                            props: string[];
                                            render: any;
                                            staticRenderFns: any[];
                                            watch: {
                                                name: any;
                                            };
                                        };
                                    };
                                    computed: {
                                        firstYear: any;
                                        headerArrowsStyle: any;
                                        headerStyle: any;
                                        headerTitleStyle: any;
                                        lastYear: any;
                                        month: any;
                                        monthItems: any;
                                        monthRows: any;
                                        year: any;
                                        yearItems: any;
                                        yearRows: any;
                                    };
                                    created: any;
                                    data: any;
                                    methods: {
                                        createRows: any;
                                        getAttributeInfo: any;
                                        getMonthAttributes: any;
                                        getMonthCellStyle: any;
                                        getYearCellStyle: any;
                                        getYearGroupIndex: any;
                                        mapAttributes: any;
                                        monthClick: any;
                                        moveNextYear: any;
                                        moveNextYearGroup: any;
                                        movePrevYear: any;
                                        movePrevYearGroup: any;
                                        selectMode: any;
                                        yearClick: any;
                                    };
                                    props: {
                                        attributes: any;
                                        formats: any;
                                        mode: {
                                            default: string;
                                            type: any;
                                        };
                                        styles: any;
                                        validator: {
                                            default: any;
                                            type: any;
                                        };
                                        value: {
                                            default: any;
                                            type: any;
                                        };
                                    };
                                    render: any;
                                    staticRenderFns: any[];
                                    watch: {
                                        attributes: any;
                                        mode: any;
                                        year: any;
                                        yearGroupIndex: any;
                                        yearIndex: any;
                                    };
                                };
                                CalendarWeeks: {
                                    beforeCreate: any[];
                                    components: {
                                        CalendarDay: {
                                            beforeCreate: any[];
                                            components: {
                                                CalendarDayPopoverRow: {
                                                    beforeCreate: any[];
                                                    computed: {
                                                        indicatorStyle: any;
                                                        isSelectable: any;
                                                    };
                                                    props: {
                                                        attribute: any;
                                                        hideIndicator: any;
                                                    };
                                                    render: any;
                                                    staticRenderFns: any[];
                                                };
                                                Popover: {
                                                    beforeCreate: any[];
                                                    beforeDestroy: any;
                                                    computed: {
                                                        containerStyle: any;
                                                        contentOffsetDirection: any;
                                                        contentWrapperStyle: any;
                                                        visibilityIsManaged: any;
                                                        visible: any;
                                                    };
                                                    created: any;
                                                    data: any;
                                                    methods: {
                                                        afterContentEnter: any;
                                                        afterContentLeave: any;
                                                        beforeContentEnter: any;
                                                        beforeContentLeave: any;
                                                        click: any;
                                                        contentEnter: any;
                                                        contentLeave: any;
                                                        focusin: any;
                                                        focusout: any;
                                                        mouseleave: any;
                                                        mousemove: any;
                                                        refreshClearMargin: any;
                                                        windowTapOrClick: any;
                                                    };
                                                    mounted: any;
                                                    props: {
                                                        align: {
                                                            default: any;
                                                            type: any;
                                                        };
                                                        contentOffset: {
                                                            default: any;
                                                            type: any;
                                                        };
                                                        contentStyle: any;
                                                        direction: {
                                                            default: any;
                                                            type: any;
                                                        };
                                                        forceHidden: any;
                                                        isExpanded: {
                                                            default: any;
                                                            type: any;
                                                        };
                                                        isInteractive: any;
                                                        showClearMargin: any;
                                                        toggleVisibleOnClick: any;
                                                        transition: {
                                                            default: string;
                                                            type: any;
                                                        };
                                                        visibility: {
                                                            default: any;
                                                            type: any;
                                                        };
                                                    };
                                                    render: any;
                                                    staticRenderFns: any[];
                                                    watch: {
                                                        forceHidden: any;
                                                    };
                                                };
                                            };
                                            computed: {
                                                attributesLength: any;
                                                attributesList: any;
                                                attributesMap: any;
                                                backgrounds: any;
                                                bars: any;
                                                barsStyle: any;
                                                contentStyle: any;
                                                dateTime: any;
                                                dayCellStyle: any;
                                                dots: any;
                                                dotsStyle: any;
                                                hasBackgrounds: any;
                                                hasBars: any;
                                                hasDots: any;
                                                hasPopovers: any;
                                                inMonth: any;
                                                isFocusedDirty: any;
                                                isHoveredDirty: any;
                                                label: any;
                                                popoverContentStyle: any;
                                                popoverIsInteractive: any;
                                                popoverState: any;
                                                popoverVisibility: any;
                                                popovers: any;
                                                shouldCheckDirty: any;
                                            };
                                            created: any;
                                            data: any;
                                            methods: {
                                                click: any;
                                                evalAttribute: any;
                                                getBackground: any;
                                                getBackgroundCap: any;
                                                getBar: any;
                                                getDayEvent: any;
                                                getDot: any;
                                                getPopover: any;
                                                mouseenter: any;
                                                mouseleave: any;
                                                mouseover: any;
                                                refreshGlyphs: any;
                                            };
                                            props: {
                                                attributes: any;
                                                day: {
                                                    required: boolean;
                                                    type: any;
                                                };
                                                formats: any;
                                                popoverContentOffset: {
                                                    default: number;
                                                    type: any;
                                                };
                                                styles: any;
                                            };
                                            render: any;
                                            staticRenderFns: any[];
                                            watch: {
                                                attributesList: any;
                                                isFocusedDirty: any;
                                                isHoveredDirty: any;
                                            };
                                        };
                                    };
                                    computed: {
                                        weeks: any;
                                    };
                                    props: {
                                        monthComps: any;
                                        nextMonthComps: any;
                                        prevMonthComps: any;
                                        trimMaxWeek: any;
                                    };
                                    render: any;
                                    staticRenderFns: any[];
                                };
                                Popover: {
                                    beforeCreate: any[];
                                    beforeDestroy: any;
                                    computed: {
                                        containerStyle: any;
                                        contentOffsetDirection: any;
                                        contentWrapperStyle: any;
                                        visibilityIsManaged: any;
                                        visible: any;
                                    };
                                    created: any;
                                    data: any;
                                    methods: {
                                        afterContentEnter: any;
                                        afterContentLeave: any;
                                        beforeContentEnter: any;
                                        beforeContentLeave: any;
                                        click: any;
                                        contentEnter: any;
                                        contentLeave: any;
                                        focusin: any;
                                        focusout: any;
                                        mouseleave: any;
                                        mousemove: any;
                                        refreshClearMargin: any;
                                        windowTapOrClick: any;
                                    };
                                    mounted: any;
                                    props: {
                                        align: {
                                            default: any;
                                            type: any;
                                        };
                                        contentOffset: {
                                            default: any;
                                            type: any;
                                        };
                                        contentStyle: any;
                                        direction: {
                                            default: any;
                                            type: any;
                                        };
                                        forceHidden: any;
                                        isExpanded: {
                                            default: any;
                                            type: any;
                                        };
                                        isInteractive: any;
                                        showClearMargin: any;
                                        toggleVisibleOnClick: any;
                                        transition: {
                                            default: string;
                                            type: any;
                                        };
                                        visibility: {
                                            default: any;
                                            type: any;
                                        };
                                    };
                                    render: any;
                                    staticRenderFns: any[];
                                    watch: {
                                        forceHidden: any;
                                    };
                                };
                                SvgIcon: {
                                    beforeCreate: any[];
                                    data: any;
                                    methods: {
                                        updateIcon: any;
                                    };
                                    mounted: any;
                                    props: string[];
                                    render: any;
                                    staticRenderFns: any[];
                                    watch: {
                                        name: any;
                                    };
                                };
                            };
                            computed: {
                                arrowStyle: any;
                                canMoveNextMonth: any;
                                canMovePrevMonth: any;
                                headerHorizontalDividerStyle_: any;
                                headerStyle: any;
                                navSlots: any;
                                navWrapperStyle: any;
                                paneStyle: any;
                                titleClass: any;
                                titleStyle: any;
                                titleTransition_: any;
                                weekdayLabels: any;
                                weekdaysHorizontalDividerStyle_: any;
                                weekdaysStyle_: any;
                                weeksStyle_: any;
                                weeksTransition_: any;
                            };
                            created: any;
                            data: any;
                            methods: {
                                canMove: any;
                                forceMove: any;
                                getTransitionDirection: any;
                                getTransitionName: any;
                                loadPage: any;
                                monthIsDisabled: any;
                                move: any;
                                moveNextMonth: any;
                                moveNextYear: any;
                                movePrevMonth: any;
                                movePrevYear: any;
                                moveThisMonth: any;
                                navPageSelected: any;
                                preloadPages: any;
                                touchEnd: any;
                                touchMove: any;
                                touchStart: any;
                                yearIsDisabled: any;
                            };
                            props: {
                                formats: any;
                                hideLeftButton: any;
                                hideRightButton: any;
                                maxPage: any;
                                minPage: any;
                                navVisibility: {
                                    default: any;
                                    type: any;
                                };
                                page: {
                                    default: any;
                                    type: any;
                                };
                                paneWidth: any;
                                position: {
                                    default: number;
                                    type: any;
                                };
                                styles: any;
                                titlePosition: {
                                    default: any;
                                    type: any;
                                };
                                titleTransition: {
                                    default: any;
                                    type: any;
                                };
                                weeksTransition: {
                                    default: any;
                                    type: any;
                                };
                            };
                            render: any;
                            staticRenderFns: any[];
                            watch: {
                                page: any;
                                page_: any;
                            };
                        };
                    };
                    computed: {
                        attributes_: any;
                        dividerStyle: any;
                        formats_: any;
                        isDoublePaned_: any;
                        leftButtonHidden: any;
                        maxFromPage: any;
                        maxPage_: any;
                        minPage_: any;
                        minToPage: any;
                        rightButtonHidden: any;
                        themeStyles_: any;
                        wrapperStyle: any;
                    };
                    created: any;
                    data: any;
                    methods: {
                        refreshFromPage: any;
                        refreshIsConstrained: any;
                        refreshToPage: any;
                    };
                    mixins: {
                        methods: {
                            mergeListeners: any;
                        };
                    }[];
                    mounted: any;
                    name: string;
                    props: {
                        attributes: any;
                        formats: any;
                        fromPage: any;
                        isDoublePaned: any;
                        isExpanded: any;
                        isLinked: any;
                        isVertical: any;
                        maxDate: any;
                        maxPage: any;
                        minDate: any;
                        minPage: any;
                        paneWidth: {
                            default: any;
                            type: any;
                        };
                        showLinkedButtons: {
                            default: any;
                            type: any;
                        };
                        themeStyles: any;
                        toPage: any;
                    };
                    render: any;
                    watch: {
                        fromPage: any;
                        fromPage_: any;
                        isDoublePaned_: any;
                        isExpanded: any;
                        isLinked: any;
                        toPage: any;
                        toPage_: any;
                    };
                };
            };
            computed: {
                attributes_: any;
                selectAttribute_: any;
            };
            methods: {
                clickDay: any;
            };
            mixins: {
                methods: {
                    mergeListeners: any;
                };
            }[];
            props: {
                attributes: any;
                disabledAttribute: any;
                isRequired: any;
                selectAttribute: any;
                value: {
                    default: any;
                    type: any;
                };
            };
            render: any;
        };
    };

    const mixins: {
        methods: {
            mergeListeners: any;
        };
    }[];

    function created(): void;

    function data(): any;

    function render(t: any): any;

    namespace computed {
        function componentName(): any;

        function disabledAttribute_(): any;

        function disabledDates_(): any;

        function dragAttribute_(): any;

        function formats_(): any;

        function inputAttrs(): any;

        function inputFormats(): any;

        function inputProps_(): any;

        function popoverContentStyle(): any;

        function profile(): any;

        function selectAttribute_(): any;

        function themeStyles_(): any;

    }

    namespace methods {
        function assignPageRange(): void;

        function buildSelectDragAttribute(t: any, e: any): any;

        function filteredListeners(): any;

        function formatInput(): void;

        function hidePopover(): void;

        function inputChange(): void;

        function inputInput(t: any): void;

        function inputKeyup(t: any): void;

        function updateValue(...args: any[]): void;

    }

    namespace props {
        class disabledAttribute {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        class dragAttribute {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        class formats {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        class fromPage {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        class isInline {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class isRequired {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class maxDate {
            constructor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any);

            // Native method; no parameter or return type inference available
            getDate(): any;

            // Native method; no parameter or return type inference available
            getDay(): any;

            // Native method; no parameter or return type inference available
            getFullYear(): any;

            // Native method; no parameter or return type inference available
            getHours(): any;

            // Native method; no parameter or return type inference available
            getMilliseconds(): any;

            // Native method; no parameter or return type inference available
            getMinutes(): any;

            // Native method; no parameter or return type inference available
            getMonth(): any;

            // Native method; no parameter or return type inference available
            getSeconds(): any;

            // Native method; no parameter or return type inference available
            getTime(): any;

            // Native method; no parameter or return type inference available
            getTimezoneOffset(): any;

            // Native method; no parameter or return type inference available
            getUTCDate(): any;

            // Native method; no parameter or return type inference available
            getUTCDay(): any;

            // Native method; no parameter or return type inference available
            getUTCFullYear(): any;

            // Native method; no parameter or return type inference available
            getUTCHours(): any;

            // Native method; no parameter or return type inference available
            getUTCMilliseconds(): any;

            // Native method; no parameter or return type inference available
            getUTCMinutes(): any;

            // Native method; no parameter or return type inference available
            getUTCMonth(): any;

            // Native method; no parameter or return type inference available
            getUTCSeconds(): any;

            // Native method; no parameter or return type inference available
            getYear(): any;

            // Native method; no parameter or return type inference available
            setDate(p0: any): any;

            // Native method; no parameter or return type inference available
            setFullYear(p0: any, p1: any, p2: any): any;

            // Native method; no parameter or return type inference available
            setHours(p0: any, p1: any, p2: any, p3: any): any;

            // Native method; no parameter or return type inference available
            setMilliseconds(p0: any): any;

            // Native method; no parameter or return type inference available
            setMinutes(p0: any, p1: any, p2: any): any;

            // Native method; no parameter or return type inference available
            setMonth(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            setSeconds(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            setTime(p0: any): any;

            // Native method; no parameter or return type inference available
            setUTCDate(p0: any): any;

            // Native method; no parameter or return type inference available
            setUTCFullYear(p0: any, p1: any, p2: any): any;

            // Native method; no parameter or return type inference available
            setUTCHours(p0: any, p1: any, p2: any, p3: any): any;

            // Native method; no parameter or return type inference available
            setUTCMilliseconds(p0: any): any;

            // Native method; no parameter or return type inference available
            setUTCMinutes(p0: any, p1: any, p2: any): any;

            // Native method; no parameter or return type inference available
            setUTCMonth(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            setUTCSeconds(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            setYear(p0: any): any;

            // Native method; no parameter or return type inference available
            toDateString(): any;

            // Native method; no parameter or return type inference available
            toGMTString(): any;

            // Native method; no parameter or return type inference available
            toISOString(): any;

            // Native method; no parameter or return type inference available
            toJSON(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleDateString(): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toLocaleTimeString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toTimeString(): any;

            // Native method; no parameter or return type inference available
            toUTCString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static UTC(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): any;

            static now(): any;

            static parse(p0: any): any;

        }

        class minDate {
            constructor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any);

            // Native method; no parameter or return type inference available
            getDate(): any;

            // Native method; no parameter or return type inference available
            getDay(): any;

            // Native method; no parameter or return type inference available
            getFullYear(): any;

            // Native method; no parameter or return type inference available
            getHours(): any;

            // Native method; no parameter or return type inference available
            getMilliseconds(): any;

            // Native method; no parameter or return type inference available
            getMinutes(): any;

            // Native method; no parameter or return type inference available
            getMonth(): any;

            // Native method; no parameter or return type inference available
            getSeconds(): any;

            // Native method; no parameter or return type inference available
            getTime(): any;

            // Native method; no parameter or return type inference available
            getTimezoneOffset(): any;

            // Native method; no parameter or return type inference available
            getUTCDate(): any;

            // Native method; no parameter or return type inference available
            getUTCDay(): any;

            // Native method; no parameter or return type inference available
            getUTCFullYear(): any;

            // Native method; no parameter or return type inference available
            getUTCHours(): any;

            // Native method; no parameter or return type inference available
            getUTCMilliseconds(): any;

            // Native method; no parameter or return type inference available
            getUTCMinutes(): any;

            // Native method; no parameter or return type inference available
            getUTCMonth(): any;

            // Native method; no parameter or return type inference available
            getUTCSeconds(): any;

            // Native method; no parameter or return type inference available
            getYear(): any;

            // Native method; no parameter or return type inference available
            setDate(p0: any): any;

            // Native method; no parameter or return type inference available
            setFullYear(p0: any, p1: any, p2: any): any;

            // Native method; no parameter or return type inference available
            setHours(p0: any, p1: any, p2: any, p3: any): any;

            // Native method; no parameter or return type inference available
            setMilliseconds(p0: any): any;

            // Native method; no parameter or return type inference available
            setMinutes(p0: any, p1: any, p2: any): any;

            // Native method; no parameter or return type inference available
            setMonth(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            setSeconds(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            setTime(p0: any): any;

            // Native method; no parameter or return type inference available
            setUTCDate(p0: any): any;

            // Native method; no parameter or return type inference available
            setUTCFullYear(p0: any, p1: any, p2: any): any;

            // Native method; no parameter or return type inference available
            setUTCHours(p0: any, p1: any, p2: any, p3: any): any;

            // Native method; no parameter or return type inference available
            setUTCMilliseconds(p0: any): any;

            // Native method; no parameter or return type inference available
            setUTCMinutes(p0: any, p1: any, p2: any): any;

            // Native method; no parameter or return type inference available
            setUTCMonth(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            setUTCSeconds(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            setYear(p0: any): any;

            // Native method; no parameter or return type inference available
            toDateString(): any;

            // Native method; no parameter or return type inference available
            toGMTString(): any;

            // Native method; no parameter or return type inference available
            toISOString(): any;

            // Native method; no parameter or return type inference available
            toJSON(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleDateString(): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toLocaleTimeString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toTimeString(): any;

            // Native method; no parameter or return type inference available
            toUTCString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static UTC(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): any;

            static now(): any;

            static parse(p0: any): any;

        }

        class popoverShowClearMargin {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class selectAttribute {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        class toPage {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        const availableDates: any;

        const disabledDates: any;

        const value: {
            required: boolean;
            type: any;
        };

        namespace inputProps {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                hasOwnProperty(p0: any): any;

                // Native method; no parameter or return type inference available
                isPrototypeOf(p0: any): any;

                // Native method; no parameter or return type inference available
                propertyIsEnumerable(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static assign: any;

                static create: any;

                static defineProperties: any;

                static defineProperty: any;

                static entries: any;

                static freeze: any;

                static getOwnPropertyDescriptor: any;

                static getOwnPropertyDescriptors: any;

                static getOwnPropertyNames: any;

                static getOwnPropertySymbols: any;

                static getPrototypeOf: any;

                static is: any;

                static isExtensible: any;

                static isFrozen: any;

                static isSealed: any;

                static keys: any;

                static preventExtensions: any;

                static seal: any;

                static setPrototypeOf: any;

                static values: any;

            }

        }

        namespace mode {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace popoverAlign {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace popoverContentOffset {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace popoverDirection {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace popoverExpanded {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace popoverKeepVisibleOnInput {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace popoverVisibility {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace showCaps {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace showDayPopover {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace themeStyles {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                hasOwnProperty(p0: any): any;

                // Native method; no parameter or return type inference available
                isPrototypeOf(p0: any): any;

                // Native method; no parameter or return type inference available
                propertyIsEnumerable(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static assign: any;

                static create: any;

                static defineProperties: any;

                static defineProperty: any;

                static entries: any;

                static freeze: any;

                static getOwnPropertyDescriptor: any;

                static getOwnPropertyDescriptors: any;

                static getOwnPropertyNames: any;

                static getOwnPropertySymbols: any;

                static getPrototypeOf: any;

                static is: any;

                static isExtensible: any;

                static isFrozen: any;

                static isSealed: any;

                static keys: any;

                static preventExtensions: any;

                static seal: any;

                static setPrototypeOf: any;

                static values: any;

            }

        }

        namespace tintColor {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace updateOnInput {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

    }

    namespace watch {
        function disabledAttribute_(): void;

        function dragValue(): void;

        function fromPage(t: any): void;

        function fromPage_(t: any): void;

        function mode(): void;

        function toPage(t: any): void;

        function toPage_(t: any): void;

        function value(): void;

    }

}

export namespace Popover {
    const beforeCreate: any[];

    const staticRenderFns: any[];

    function beforeDestroy(): void;

    function created(): void;

    function data(): any;

    function mounted(): void;

    function render(): any;

    namespace computed {
        function containerStyle(): any;

        function contentOffsetDirection(): any;

        function contentWrapperStyle(): any;

        function visibilityIsManaged(): any;

        function visible(): any;

    }

    namespace methods {
        function afterContentEnter(): void;

        function afterContentLeave(): void;

        function beforeContentEnter(): void;

        function beforeContentLeave(): void;

        function click(t: any): void;

        function contentEnter(): void;

        function contentLeave(): void;

        function focusin(t: any): void;

        function focusout(t: any): void;

        function mouseleave(t: any): void;

        function mousemove(): void;

        function refreshClearMargin(): void;

        function windowTapOrClick(t: any): void;

    }

    namespace props {
        class contentStyle {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        class forceHidden {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class isInteractive {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class showClearMargin {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class toggleVisibleOnClick {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace align {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace contentOffset {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace direction {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace isExpanded {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace transition {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace visibility {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

    }

    namespace watch {
        function forceHidden(): void;

    }

}

